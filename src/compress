#!/usr/bin/env python
import subprocess;
import argparse;
import os;
import sys;
import uuid

def get_rh():
    return "_compress__" + str(uuid.uuid4().hex);

def debug_log(text, verbosity = 1):
    if (args.verbose >= verbosity):
        print (text);
    return;

def error_log(text):
    sys.stderr.write(text + "\n");
    sys.stderr.flush();
    return;

def test_compress(path):
    result = subprocess.check_output("lsattr " + path, shell=True, universal_newlines=True).strip();
    if (result == ''):
        raise Exception('lsattr returned nothing');
    result = result[:result.index(" ")];
    for f in result:
        if (f == 'c'):
            return True
    return False;

def set_compress(path):
    rc = subprocess.call("chattr +c " + path, shell=True);
    return rc;

def unset_compress(path):
    rc = subprocess.call("chattr -c " + path, shell=True);
    return rc;

def compress_file(filepath):
    debug_log("Compressing " + filepath);
    # fixme this suck
    set_compress(filepath);
    return 0;

def compress_folder(path):
    status = "Compressing";
    if (args.decompress):
        status = "Decompressing";
    debug_log(status + " folder recursively: " + path);
    if (args.decompress):
        rc = unset_compress(path);
    else:
        rc = set_compress(path);
    if (rc != 0):
        error_log("error: unable to set compression flag of " + path + " error code: " + str(rc));
        sys.exit(10);
    for item in os.listdir(path):
        p = path + "/" + item;
        if (os.path.islink(p)):
            debug_log("Skipped: " + p + " (symlink)");
        elif (os.path.isdir(p)):
            compress_folder(p);
        elif (os.path.isfile(p)):
            # now this is a btrfs hack we test if file is already compressed and if it's not, we will move it
            if (not args.decompress and test_compress(p)):
                debug_log("Skipped: " + p + " already compressed");
                continue;
            elif (args.decompress and not test_compress(p)):
                debug_log("Skipped:" + p + " not compressed");
                continue;
            debug_log(status + " " + p + " using cp trick");
            n = p + get_rh();
            if (target_exists(n)):
                raise Exception(n + " already exists");
            # we first copy the file so that if we get killed, there is a low chance that original data get damaged
            rc = subprocess.call(["cp", "-p", p, n])
            if (rc != 0):
                error_log("Unable to copy " + p + " to " + n);
                sys.exit(80);
            os.remove(p);
            os.rename(n, p);
            # preserve file flags
        else:
            debug_log("Ignoring unknown file type: " + p);
    return 0;

def process_args():
    parser = argparse.ArgumentParser(description = 'Tool which recursively compress files in a folder using btrfs transparent compression')
    parser.add_argument('-r', '--recursive', action='store_true', help='Recursively change all items in given path')
    parser.add_argument('-v', '--verbose', action='count', help='Change the program verbosity, by default program prints nothing unless there is some error')
    parser.add_argument('-d', '--decompress', action='store_true', help='Will remove compression flag and uncompress all files')
    #parser.add_argument('-f', '--force', action='store_true')
    #parser.add_argument('-s', '--strict', action='store_true')
    parser.add_argument('-V', '--version', version='compress 1.0.0.0', action='version')
    parser.add_argument('target', type=str, help='File or folder that you want to compress')
    args = parser.parse_args()
    if (args.verbose is None):
        args.verbose = 0;
    return args;

def target_exists(target):
    if (os.path.isfile(target)):
        return True;
    if (os.path.isdir(target)):
        return True;
    return False;

def recursive_scan():
    return 0;

args = process_args();
if (not target_exists(args.target)):
    error_log("FATAL: " + args.target + " not found");
    sys.exit(1);

if (not args.recursive and os.path.isdir(args.target)):
    error_log("ERROR: " + args.target + " is a directory. Use -r option if you want to recursively compress it");
    sys.exit(2);

if (not args.recursive):
    compress_file(args.target);
    sys.exit(0);

if (os.path.isfile(args.target)):
    compress_file(args.target);
else:
    compress_folder(args.target);

sys.exit(0);
